package org.compuscene.metrics.prometheus;

import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;
import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
import org.elasticsearch.action.admin.cluster.node.stats.*;
import org.elasticsearch.client.Client;
import org.elasticsearch.http.HttpStats;
import org.elasticsearch.indices.NodeIndicesStats;
import org.elasticsearch.indices.breaker.AllCircuitBreakerStats;
import org.elasticsearch.indices.breaker.CircuitBreakerStats;
import org.elasticsearch.monitor.fs.FsInfo;
import org.elasticsearch.monitor.jvm.JvmStats;
import org.elasticsearch.monitor.os.OsStats;
import org.elasticsearch.monitor.process.ProcessStats;
import org.elasticsearch.script.ScriptStats;
import org.elasticsearch.threadpool.ThreadPoolStats;
import org.elasticsearch.transport.TransportStats;

public class PrometheusMetrics {

    private final Client client;
    private PrometheusMetricsCollection metrics;

    public PrometheusMetrics(final Client client) {
        this.client = client;

        NodesStatsRequest nodesStatsRequest = new NodesStatsRequest().all();
        NodesStatsResponse nodesStatsResponse = this.client.admin().cluster().nodesStats(nodesStatsRequest).actionGet();

        String cluster = nodesStatsResponse.getClusterNameAsString();

        this.metrics = new PrometheusMetricsCollection(cluster);

        this.registerClusterMetrics();
        this.registerJVMMetrics();
        this.registerIndicesMetrics();
        this.registerTransportMetrics();
        this.registerHTTPMetrics();
        this.registerScriptMetrics();
        this.registerProcessMetrics();
        this.registerOsMetrics();
        this.registerCircuitBreakerMetrics();
        this.registerThreadPoolMetrics();
        this.registerFsMetrics();
    }

    private void registerJVMMetrics() {
        this.metrics.registerNodeGauge("jvm_uptime", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_mem_heap_max", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_mem_heap_used", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_mem_heap_used_percent", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_mem_nonheap_used", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_mem_heap_committed", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_mem_nonheap_committed", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_mem_pool_max", "No Help provided for the moment","node", "pool");
        this.metrics.registerNodeGauge("jvm_mem_pool_peak_max", "No Help provided for the moment","node", "pool");
        this.metrics.registerNodeGauge("jvm_mem_pool_used", "No Help provided for the moment","node", "pool");
        this.metrics.registerNodeGauge("jvm_mem_pool_peak_used", "No Help provided for the moment","node", "pool");
        this.metrics.registerNodeGauge("jvm_threads_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_threads_peak_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_gc_collection_count", "No Help provided for the moment","node", "gc");
        this.metrics.registerNodeGauge("jvm_gc_collection_time", "No Help provided for the moment","node", "gc");
        this.metrics.registerNodeGauge("jvm_bufferpool_count", "No Help provided for the moment","node", "bufferpool");
        this.metrics.registerNodeGauge("jvm_bufferpool_total_capacity", "No Help provided for the moment","node", "bufferpool");
        this.metrics.registerNodeGauge("jvm_bufferpool_used", "No Help provided for the moment","node", "bufferpool");
        this.metrics.registerNodeGauge("jvm_classes_loaded_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_classes_total_loaded_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("jvm_classes_unloaded_count", "No Help provided for the moment","node");
    }

    private void updateJVMMetrics(String node, JvmStats jvm) {
        if (jvm != null) {
            this.metrics.setGauge("jvm_uptime",jvm.getUptime().millis(), node);

            this.metrics.setGauge("jvm_mem_heap_max",jvm.getMem().getHeapMax().bytes(), node);
            this.metrics.setGauge("jvm_mem_heap_used",jvm.getMem().getHeapUsed().bytes(), node);
            this.metrics.setGauge("jvm_mem_heap_used_percent",jvm.getMem().getHeapUsedPercent(), node);
            this.metrics.setGauge("jvm_mem_nonheap_used",jvm.getMem().getNonHeapUsed().bytes(), node);
            this.metrics.setGauge("jvm_mem_heap_committed",jvm.getMem().getHeapCommitted().bytes(), node);
            this.metrics.setGauge("jvm_mem_nonheap_committed",jvm.getMem().getNonHeapCommitted().bytes(), node);

            for (JvmStats.MemoryPool mp : jvm.getMem()) {
                String name = mp.getName();
                this.metrics.setGauge("jvm_mem_pool_max",mp.getMax().bytes(), node, name);
                this.metrics.setGauge("jvm_mem_pool_peak_max",mp.getPeakMax().bytes(), node, name);
                this.metrics.setGauge("jvm_mem_pool_used",mp.getUsed().bytes(), node, name);
                this.metrics.setGauge("jvm_mem_pool_peak_used",mp.getPeakUsed().bytes(), node, name);
            }

            this.metrics.setGauge("jvm_threads_count",jvm.getThreads().getCount(), node);
            this.metrics.setGauge("jvm_threads_peak_count",jvm.getThreads().getPeakCount(), node);

            for (JvmStats.GarbageCollector gc : jvm.getGc().getCollectors()) {
                String name = gc.getName();
                this.metrics.setGauge("jvm_gc_collection_count",gc.getCollectionCount(), node, name);
                this.metrics.setGauge("jvm_gc_collection_time",gc.getCollectionTime().getSeconds(), node, name);
            }

            for (JvmStats.BufferPool bp : jvm.getBufferPools()) {
                String name = bp.getName();
                this.metrics.setGauge("jvm_bufferpool_count",bp.getCount(), node, name);
                this.metrics.setGauge("jvm_bufferpool_total_capacity",bp.getTotalCapacity().bytes(), node, name);
                this.metrics.setGauge("jvm_bufferpool_used",bp.getUsed().bytes(), node, name);
            }

            this.metrics.setGauge("jvm_classes_loaded_count",jvm.getClasses().getLoadedClassCount(), node);
            this.metrics.setGauge("jvm_classes_total_loaded_count",jvm.getClasses().getTotalLoadedClassCount(), node);
            this.metrics.setGauge("jvm_classes_unloaded_count",jvm.getClasses().getUnloadedClassCount(), node);
        }
    }

    private void registerIndicesMetrics() {
        this.metrics.registerNodeGauge("indices_doc_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_doc_deleted", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_store_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_store_throttle_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_delete_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_delete_curent", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_delete_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_index_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_index_current", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_index_failed", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_index_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_noop_update_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_is_throttled", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_indexing_throttle_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_get_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_get_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_get_exists_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_get_exists_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_get_missing_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_get_missing_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_open_contexts", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_fetch_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_fetch_current", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_fetch_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_query_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_query_current", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_query_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_scroll_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_scroll_current", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_search_scroll_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_current", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_current_docs", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_current_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_total", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_total_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_total_docs", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_total_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_total_stop_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_total_throttled_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_merges_total_auto_throttle", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_refresh_total", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_refresh_total_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_flush_total", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_flush_total_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_querycache_cache_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_querycache_cache_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_querycache_evictions", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_querycache_hit_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_querycache_memory_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_querycache_miss_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_querycache_total_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_fielddata_memory_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_fielddata_evictions", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_percolate_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_percolate_current", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_percolate_memory_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_percolate_queries", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_percolate_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_completion_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_bitset", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_docvalues", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_indexwriter_max", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_indexwriter", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_norms", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_storefields", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_terms", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_termvectors", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_segments_memory_versionmap", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_suggest_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_suggest_current", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_suggest_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_requestcache_evictions", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_requestcache_hit_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_requestcache_memory_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_requestcache_miss_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_recovery_current_as_source", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_recovery_current_as_target", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("indices_recovery_throttle_time", "No Help provided for the moment","node");
    }

    private void updateIndicesMetrics(String node, NodeIndicesStats idx) {
        if (idx != null) {
            this.metrics.setGauge("indices_doc_count",idx.getDocs().getCount(), node);
            this.metrics.setGauge("indices_doc_deleted",idx.getDocs().getDeleted(), node);
            this.metrics.setGauge("indices_store_size",idx.getStore().getSizeInBytes(), node);
            this.metrics.setGauge("indices_store_throttle_time",idx.getStore().getThrottleTime().millis(), node);
            this.metrics.setGauge("indices_indexing_delete_count",idx.getIndexing().getTotal().getDeleteCount(), node);
            this.metrics.setGauge("indices_indexing_delete_curent",idx.getIndexing().getTotal().getDeleteCurrent(), node);
            this.metrics.setGauge("indices_indexing_delete_time",idx.getIndexing().getTotal().getDeleteTimeInMillis(), node);
            this.metrics.setGauge("indices_indexing_index_count",idx.getIndexing().getTotal().getIndexCount(), node);
            this.metrics.setGauge("indices_indexing_index_current",idx.getIndexing().getTotal().getIndexCurrent(), node);
            this.metrics.setGauge("indices_indexing_index_failed",idx.getIndexing().getTotal().getIndexFailedCount(), node);
            this.metrics.setGauge("indices_indexing_index_time",idx.getIndexing().getTotal().getIndexTimeInMillis(), node);
            this.metrics.setGauge("indices_indexing_noop_update_count",idx.getIndexing().getTotal().getNoopUpdateCount(), node);
            this.metrics.setGauge("indices_indexing_is_throttled",idx.getIndexing().getTotal().isThrottled() ? 1 : 0, node);
            this.metrics.setGauge("indices_indexing_throttle_time",idx.getIndexing().getTotal().getThrottleTimeInMillis(), node);
            this.metrics.setGauge("indices_get_count",idx.getGet().getCount(), node);
            this.metrics.setGauge("indices_get_time",idx.getGet().getTimeInMillis(), node);
            this.metrics.setGauge("indices_get_exists_count",idx.getGet().getExistsCount(), node);
            this.metrics.setGauge("indices_get_exists_time",idx.getGet().getExistsTimeInMillis(), node);
            this.metrics.setGauge("indices_get_missing_count",idx.getGet().getMissingCount(), node);
            this.metrics.setGauge("indices_get_missing_time",idx.getGet().getMissingTimeInMillis(), node);
            this.metrics.setGauge("indices_search_open_contexts",idx.getSearch().getOpenContexts(), node);
            this.metrics.setGauge("indices_search_fetch_count",idx.getSearch().getTotal().getFetchCount(), node);
            this.metrics.setGauge("indices_search_fetch_current",idx.getSearch().getTotal().getFetchCurrent(), node);
            this.metrics.setGauge("indices_search_fetch_time",idx.getSearch().getTotal().getFetchTimeInMillis(), node);
            this.metrics.setGauge("indices_search_query_count",idx.getSearch().getTotal().getQueryCount(), node);
            this.metrics.setGauge("indices_search_query_current",idx.getSearch().getTotal().getQueryCurrent(), node);
            this.metrics.setGauge("indices_search_query_time",idx.getSearch().getTotal().getQueryTimeInMillis(), node);
            this.metrics.setGauge("indices_search_scroll_count",idx.getSearch().getTotal().getScrollCount(), node);
            this.metrics.setGauge("indices_search_scroll_current",idx.getSearch().getTotal().getScrollCurrent(), node);
            this.metrics.setGauge("indices_search_scroll_time",idx.getSearch().getTotal().getScrollTimeInMillis(), node);
            this.metrics.setGauge("indices_merges_current",idx.getMerge().getCurrent(), node);
            this.metrics.setGauge("indices_merges_current_docs",idx.getMerge().getCurrentNumDocs(), node);
            this.metrics.setGauge("indices_merges_current_size",idx.getMerge().getCurrentSizeInBytes(), node);
            this.metrics.setGauge("indices_merges_total",idx.getMerge().getTotal(), node);
            this.metrics.setGauge("indices_merges_total_time",idx.getMerge().getTotalTimeInMillis(), node);
            this.metrics.setGauge("indices_merges_total_docs",idx.getMerge().getTotalNumDocs(), node);
            this.metrics.setGauge("indices_merges_total_size",idx.getMerge().getTotalSizeInBytes(), node);
            this.metrics.setGauge("indices_merges_total_stop_time",idx.getMerge().getTotalStoppedTimeInMillis(), node);
            this.metrics.setGauge("indices_merges_total_throttled_time",idx.getMerge().getTotalThrottledTimeInMillis(), node);
            this.metrics.setGauge("indices_merges_total_auto_throttle",idx.getMerge().getTotalBytesPerSecAutoThrottle(), node);
            this.metrics.setGauge("indices_refresh_total",idx.getRefresh().getTotal(), node);
            this.metrics.setGauge("indices_refresh_total_time",idx.getRefresh().getTotalTimeInMillis(), node);
            this.metrics.setGauge("indices_flush_total",idx.getFlush().getTotal(), node);
            this.metrics.setGauge("indices_flush_total_time",idx.getFlush().getTotalTimeInMillis(), node);
            this.metrics.setGauge("indices_querycache_cache_count",idx.getQueryCache().getCacheCount(), node);
            this.metrics.setGauge("indices_querycache_cache_size",idx.getQueryCache().getCacheSize(), node);
            this.metrics.setGauge("indices_querycache_evictions",idx.getQueryCache().getEvictions(), node);
            this.metrics.setGauge("indices_querycache_hit_count",idx.getQueryCache().getHitCount(), node);
            this.metrics.setGauge("indices_querycache_memory_size",idx.getQueryCache().getMemorySizeInBytes(), node);
            this.metrics.setGauge("indices_querycache_miss_count",idx.getQueryCache().getMissCount(), node);
            this.metrics.setGauge("indices_querycache_total_count",idx.getQueryCache().getTotalCount(), node);
            this.metrics.setGauge("indices_fielddata_memory_size",idx.getFieldData().getMemorySizeInBytes(), node);
            this.metrics.setGauge("indices_fielddata_evictions",idx.getFieldData().getEvictions(), node);
            this.metrics.setGauge("indices_percolate_count",idx.getPercolate().getCount(), node);
            this.metrics.setGauge("indices_percolate_current",idx.getPercolate().getCurrent(), node);
            this.metrics.setGauge("indices_percolate_memory_size",idx.getPercolate().getMemorySizeInBytes(), node);
            this.metrics.setGauge("indices_percolate_queries",idx.getPercolate().getNumQueries(), node);
            this.metrics.setGauge("indices_percolate_time",idx.getPercolate().getTimeInMillis(), node);
            this.metrics.setGauge("indices_completion_size",idx.getCompletion().getSizeInBytes(), node);
            this.metrics.setGauge("indices_segments_count",idx.getSegments().getCount(), node);
            this.metrics.setGauge("indices_segments_memory_bitset",idx.getSegments().getBitsetMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory_docvalues",idx.getSegments().getDocValuesMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory_indexwriter_max",idx.getSegments().getIndexWriterMaxMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory_indexwriter",idx.getSegments().getIndexWriterMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory",idx.getSegments().getMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory_norms",idx.getSegments().getNormsMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory_storefields",idx.getSegments().getStoredFieldsMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory_terms",idx.getSegments().getTermsMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory_termvectors",idx.getSegments().getTermVectorsMemoryInBytes(), node);
            this.metrics.setGauge("indices_segments_memory_versionmap",idx.getSegments().getVersionMapMemoryInBytes(), node);
            this.metrics.setGauge("indices_suggest_time",idx.getSuggest().getTimeInMillis(), node);
            this.metrics.setGauge("indices_suggest_current",idx.getSuggest().getCurrent(), node);
            this.metrics.setGauge("indices_suggest_count",idx.getSuggest().getCount(), node);
            this.metrics.setGauge("indices_requestcache_evictions",idx.getRequestCache().getEvictions(), node);
            this.metrics.setGauge("indices_requestcache_hit_count",idx.getRequestCache().getHitCount(), node);
            this.metrics.setGauge("indices_requestcache_memory_size",idx.getRequestCache().getMemorySizeInBytes(), node);
            this.metrics.setGauge("indices_requestcache_miss_count",idx.getRequestCache().getMissCount(), node);
            this.metrics.setGauge("indices_recovery_current_as_source",idx.getRecoveryStats().currentAsSource(), node);
            this.metrics.setGauge("indices_recovery_current_as_target",idx.getRecoveryStats().currentAsTarget(), node);
            this.metrics.setGauge("indices_recovery_throttle_time",idx.getRecoveryStats().throttleTime().seconds(), node);
        }
    }

    private void registerTransportMetrics() {
        this.metrics.registerNodeGauge("indices_doc_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("transport_server_open", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("transport_rx_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("transport_tx_count", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("transport_rx_size", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("transport_tx_size", "No Help provided for the moment","node");
    }

    private void updateTransportMetrics(String node, TransportStats ts) {
        if (ts != null) {
            this.metrics.setGauge("transport_server_open",ts.getServerOpen(), node);
            this.metrics.setGauge("transport_rx_count",ts.getRxCount(), node);
            this.metrics.setGauge("transport_tx_count",ts.getTxCount(), node);
            this.metrics.setGauge("transport_rx_size",ts.getRxSize().bytes(), node);
            this.metrics.setGauge("transport_tx_size",ts.getTxSize().bytes(), node);
        }
    }

    private void registerHTTPMetrics() {
        this.metrics.registerNodeGauge("http_server_open", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("http_total_open", "No Help provided for the moment","node");
    }

    private void updateHTTPMetrics(String node, HttpStats http) {
        if (http != null) {
            this.metrics.setGauge("http_server_open",http.getServerOpen(), node);
            this.metrics.setGauge("http_total_open",http.getTotalOpen(), node);
        }
    }

    private void registerScriptMetrics() {
        this.metrics.registerNodeGauge("script_cache_evictions", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("script_compilations", "No Help provided for the moment","node");
    }

    private void updateScriptMetrics(String node, ScriptStats sc) {
        if (sc != null) {
            this.metrics.setGauge("script_cache_evictions",sc.getCacheEvictions(), node);
            this.metrics.setGauge("script_compilations",sc.getCompilations(), node);
        }
    }

    private void registerProcessMetrics() {
        this.metrics.registerNodeGauge("process_cpu_percent", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("process_cpu_time", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("process_mem_total_virtual", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("process_open_file_descriptors", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("process_max_file_descriptors", "No Help provided for the moment","node");
    }

    private void updateProcessMetrics(String node, ProcessStats ps) {
        if (ps != null) {
            this.metrics.setGauge("process_cpu_percent",ps.getCpu().getPercent(), node);
            this.metrics.setGauge("process_cpu_time",ps.getCpu().getTotal().seconds(), node);
            this.metrics.setGauge("process_mem_total_virtual",ps.getMem().getTotalVirtual().bytes(), node);
            this.metrics.setGauge("process_open_file_descriptors",ps.getOpenFileDescriptors(), node);
            this.metrics.setGauge("process_max_file_descriptors",ps.getMaxFileDescriptors(), node);
        }
    }

    private void registerOsMetrics() {
        this.metrics.registerNodeGauge("os_cpu_percent", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_load_average", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_mem_free", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_mem_free_percent", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_mem_used", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_mem_used_percent", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_mem_total", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_swap_used", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_swap_used", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("os_swap_total", "No Help provided for the moment","node");
    }

    private void updateOsMetrics(String node, OsStats os) {
        if (os != null) {
            this.metrics.setGauge("os_cpu_percent",os.getCpuPercent(), node);
            this.metrics.setGauge("os_load_average",os.getLoadAverage(), node);
            this.metrics.setGauge("os_mem_free",os.getMem().getFree().bytes(), node);
            this.metrics.setGauge("os_mem_free_percent",os.getMem().getFreePercent(), node);
            this.metrics.setGauge("os_mem_used",os.getMem().getUsed().bytes(), node);
            this.metrics.setGauge("os_mem_used_percent",os.getMem().getUsedPercent(), node);
            this.metrics.setGauge("os_mem_total",os.getMem().getTotal().bytes(), node);
            this.metrics.setGauge("os_swap_used",os.getSwap().getFree().bytes(), node);
            this.metrics.setGauge("os_swap_used",os.getSwap().getUsed().bytes(), node);
            this.metrics.setGauge("os_swap_total",os.getSwap().getTotal().bytes(), node);
        }
    }

    private void registerCircuitBreakerMetrics() {
        this.metrics.registerNodeGauge("circuitbreaker_estimated", "No Help provided for the moment","node", "name");
        this.metrics.registerNodeGauge("circuitbreaker_limit", "No Help provided for the moment","node", "name");
        this.metrics.registerNodeGauge("circuitbreaker_overhead", "No Help provided for the moment","node", "name");
        this.metrics.registerNodeGauge("circuitbreaker_tripped_count", "No Help provided for the moment","node", "name");
    }

    private void updateCircuitBreakersMetrics(String node, AllCircuitBreakerStats acbs) {
        if (acbs != null) {
            for (CircuitBreakerStats cbs : acbs.getAllStats()) {
                String name = cbs.getName();
                this.metrics.setGauge("circuitbreaker_estimated",cbs.getEstimated(), node, name);
                this.metrics.setGauge("circuitbreaker_limit",cbs.getLimit(), node, name);
                this.metrics.setGauge("circuitbreaker_overhead",cbs.getOverhead(), node, name);
                this.metrics.setGauge("circuitbreaker_tripped_count",cbs.getTrippedCount(), node, name);
            }
        }
    }

    private void registerThreadPoolMetrics() {
        this.metrics.registerNodeGauge("threadpool", "No Help provided for the moment","node", "name", "type");
    }

    private void updateThreadPoolMetrics(String node, ThreadPoolStats tps) {
        if (tps != null) {
            for (ThreadPoolStats.Stats st : tps) {
                String name = st.getName();
                this.metrics.setGauge("threadpool",st.getActive(), node, name, "active");
                this.metrics.setGauge("threadpool",st.getCompleted(), node, name, "completed");
                this.metrics.setGauge("threadpool",st.getLargest(), node, name, "largest");
                this.metrics.setGauge("threadpool",st.getQueue(), node, name, "queue");
                this.metrics.setGauge("threadpool",st.getRejected(), node, name, "rejected");
                this.metrics.setGauge("threadpool",st.getThreads(), node, name, "threads");
            }
        }
    }

    private void registerFsMetrics() {
        this.metrics.registerNodeGauge("fs_total_total", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("fs_total_available", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("fs_total_free", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("fs_total_spins", "No Help provided for the moment","node");
        this.metrics.registerNodeGauge("fs_total", "No Help provided for the moment","node", "path", "mount", "type");
        this.metrics.registerNodeGauge("fs_available", "No Help provided for the moment","node", "path", "mount", "type");
        this.metrics.registerNodeGauge("fs_free", "No Help provided for the moment","node", "path", "mount", "type");
        this.metrics.registerNodeGauge("fs_spins", "No Help provided for the moment","node", "path", "mount", "type");
    }

    private void updateFsMetrics(String node, FsInfo fs) {
        if (fs != null) {
            this.metrics.setGauge("fs_total_total",fs.getTotal().getTotal().bytes(), node);
            this.metrics.setGauge("fs_total_available",fs.getTotal().getAvailable().bytes(), node);
            this.metrics.setGauge("fs_total_free",fs.getTotal().getFree().bytes(), node);
            this.metrics.setGauge("fs_total_spins",fs.getTotal().getSpins() ? 1 : 0, node);

            for (FsInfo.Path fspath : fs) {
                String path = fspath.getPath();
                String mount = fspath.getMount();
                String type = fspath.getType();
                this.metrics.setGauge("fs_total",fspath.getTotal().bytes(), node, path, mount, type);
                this.metrics.setGauge("fs_available",fspath.getAvailable().bytes(), node, path, mount, type);
                this.metrics.setGauge("fs_free",fspath.getFree().bytes(), node, path, mount, type);
                this.metrics.setGauge("fs_spins",fspath.getSpins() ? 1 : 0, node, path, mount, type);
            }
        }
    }

    private void registerClusterMetrics(){
        this.metrics.registerGauge("cluster_status", "No Help provided for the moment");
        this.metrics.registerGauge("cluster_nodes_number", "No Help provided for the moment");
        this.metrics.registerGauge("cluster_datanodes_number", "No Help provided for the moment");
        this.metrics.registerGauge("cluster_active_shards_percent", "No Help provided for the moment");
        this.metrics.registerGauge("cluster_shards", "No Help provided for the moment","type");
        this.metrics.registerGauge("cluster_pending_tasks", "No Help provided for the moment",);
        this.metrics.registerGauge("cluster_task_max_waiting_time", "No Help provided for the moment");
        this.metrics.registerGauge("cluster_is_timed_out", "No Help provided for the moment";
        this.metrics.registerGauge("cluster_inflight_fetch_number", "No Help provided for the moment");
    }

    private void updateClusterMetrics(ClusterHealthResponse res) {
        this.metrics.setGauge("cluster_status",res.getStatus().value());

        this.metrics.setGauge("cluster_nodes_number",res.getNumberOfNodes());
        this.metrics.setGauge("cluster_datanodes_number",res.getNumberOfDataNodes());

        this.metrics.setGauge("cluster_active_shards_percent",res.getActiveShardsPercent());

        this.metrics.setGauge("cluster_shards",res.getActiveShards(),"active");
        this.metrics.setGauge("cluster_shards",res.getActivePrimaryShards(),"active_primary");
        this.metrics.setGauge("cluster_shards",res.getDelayedUnassignedShards(),"unassigned");
        this.metrics.setGauge("cluster_shards",res.getInitializingShards(),"initializing");
        this.metrics.setGauge("cluster_shards",res.getRelocatingShards(),"relocating");
        this.metrics.setGauge("cluster_shards",res.getUnassignedShards(),"unassigned");

        this.metrics.setGauge("cluster_pending_tasks",res.getNumberOfPendingTasks());
        this.metrics.setGauge("cluster_task_max_waiting_time",res.getTaskMaxWaitingTime().seconds());

        this.metrics.setGauge("cluster_is_timed_out",res.isTimedOut()?1:0);

        this.metrics.setGauge("cluster_inflight_fetch_number",res.getNumberOfInFlightFetch());
    }

    public void updateMetrics() {
        ClusterHealthRequest clusterHealthRequest = new ClusterHealthRequest();
        ClusterHealthResponse clusterHealthResponse = client.admin().cluster().health(clusterHealthRequest).actionGet();

        this.updateClusterMetrics(clusterHealthResponse);

        NodesStatsRequest nodesStatsRequest = new NodesStatsRequest().all();
        NodesStatsResponse nodesStatsResponse = this.client.admin().cluster().nodesStats(nodesStatsRequest).actionGet();

        for (NodeStats nodeStats : nodesStatsResponse.getNodes()) {
            String node = nodeStats.getNode().getName();
            this.updateJVMMetrics(node, nodeStats.getJvm());
            this.updateIndicesMetrics(node, nodeStats.getIndices());
            this.updateTransportMetrics(node, nodeStats.getTransport());
            this.updateHTTPMetrics(node, nodeStats.getHttp());
            this.updateScriptMetrics(node, nodeStats.getScriptStats());
            this.updateProcessMetrics(node, nodeStats.getProcess());
            this.updateOsMetrics(node, nodeStats.getOs());
            this.updateCircuitBreakersMetrics(node, nodeStats.getBreaker());
            this.updateThreadPoolMetrics(node, nodeStats.getThreadPool());
            this.updateFsMetrics(node, nodeStats.getFs());
        }
    }
}
